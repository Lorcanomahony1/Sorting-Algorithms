import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;







import java.util.Arrays;

public class AlgorithmsProject {

    // ALGORITHM USED TO CREATE THE LIST OF RANDOM INTEGERS
    static int[] randomArray(int n) {
        int[] array = new int[n];
        for (int i = 0; i < n; i++) {
            array[i] = (int) (Math.random() * 100);
        }
        return array;
    }


//Parewa Labs Pvt. Ltd. Programiz (n.d.) Counting Sort (With Code in Python/C++/Java/C). Available at: https://www.programiz.com/dsa/counting-sort (Accessed: 15 May 2025).

    // COUNTING SORT
    static void countSort(int array[], int size) {
        int[] output = new int[size + 1];
        int max = array[0];
        for (int i = 1; i < size; i++) {
            if (array[i] > max)
                max = array[i];
        }
        int[] count = new int[max + 1];
        for (int i = 0; i < max; ++i) {
            count[i] = 0;
        }
        for (int i = 0; i < size; i++) {
            count[array[i]]++;
        }
        for (int i = 1; i <= max; i++) {
            count[i] += count[i - 1];
        }
        for (int i = size - 1; i >= 0; i--) {
            output[count[array[i]] - 1] = array[i];
            count[array[i]]--;
        }
        for (int i = 0; i < size; i++) {
            array[i] = output[i];
        }
    }



    // QUICK SORT
//Quick Sort: https://medium.com/@AlexanderObregon/introduction-to-sorting-algorithms-in-java-a-beginners-guide-db522047effb
//Obregon, A. (2023) Introduction to sorting algorithms in Java: A beginnerâ€™s guide. Medium. Available at: https://medium.com/@AlexanderObregon/introduction-to-sorting-algorithms-in-java-a-beginners-guide-db522047effb (Accessed: 15 May 2025).

    static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                int temp = arr[i];
                arr[i] = arr[j];
                arr[j] = temp;
            }
        }
        int temp = arr[i + 1];
        arr[i + 1] = arr[high];
        arr[high] = temp;
        return i + 1;
    }





    // INSERTION SORT (Dominic Carr)
    static void insertionSort(int[] arr) {
        int i = 1;
        while (i < arr.length) {
            int j = i;
            while (j > 0 && (arr[j - 1] > arr[j])) {
                int temp = arr[j];
                arr[j] = arr[j - 1];
                arr[j - 1] = temp;
                j--;
            }
            i++;
        }
    }



    // SELECTION SORT
//SELECTION SORT -
//Selection Sort (2024) GeeksforGeeks. Available at: https://www.geeksforgeeks.org/dsa/selection-sort-algorithm-2/ (Accessed: 12 June 2025).
    static void selectionSort(int[] arr) {
        int n = arr.length;
        for (int i = 0; i < n - 1; i++) {
            int min_idx = i;
            for (int j = i + 1; j < n; j++) {
                if (arr[j] < arr[min_idx]) {
                    min_idx = j;
                }
            }
            int temp = arr[i];
            arr[i] = arr[min_idx];
            arr[min_idx] = temp;
        }
    }




    // BUBBLE SORT (Dominic Carr ATU)
    static void bubbleSort(int[] arr) {
        int n = arr.length;
        boolean swapped;
        do {
            swapped = false;
            for (int i = 1; i < n; i++) {
                if (arr[i - 1] > arr[i]) {
                    int temp = arr[i - 1];
                    arr[i - 1] = arr[i];
                    arr[i] = temp;
                    swapped = true;
                }
            }
        } while (swapped);
    }








public static void main(String[] args) {
        int size = 10000;
        int[] originalArray = randomArray(size);
        
        int numParts = 100;
        int increment = size / numParts; 

        List<Double> countSortTimes = new ArrayList<>();
        List<Double> quickSortTimes = new ArrayList<>();
        List<Double> insertionSortTimes = new ArrayList<>();
        List<Double> selectionSortTimes = new ArrayList<>();
        List<Double> bubbleSortTimes = new ArrayList<>();


/* This loops through the number of parts and adds another 1/100 each time */
for (int part = 1; part <= numParts; part++) {
    int partSize = part * increment;

    for (int algo = 1; algo <= 5; algo++) {
        int[] testArray = new int[partSize];
        for (int i = 0; i < partSize; i++) {
            testArray[i] = originalArray[i];
        }

        long startTime = System.nanoTime();

        switch (algo) {
            case 1:
                countSort(testArray, testArray.length);
                countSortTimes.add((System.nanoTime() - startTime) / 1000000);
                break;
            case 2:
                quickSort(testArray, 0, testArray.length - 1);
                quickSortTimes.add((System.nanoTime() - startTime) / 1000000);
                break;
            case 3:
                insertionSort(testArray);
                insertionSortTimes.add((System.nanoTime() - startTime) / 1000000);
                break;
            case 4:
                selectionSort(testArray);
                selectionSortTimes.add((System.nanoTime() - startTime) / 1000000);
                break;
            case 5:
                bubbleSort(testArray);
                bubbleSortTimes.add((System.nanoTime() - startTime) / 1000000);
                break;
        }
        boolean isSorted = true;
        for (int i = 1; i < testArray.length; i++) {
            if (testArray[i - 1] > testArray[i]) {
                isSorted = false;
                break;
            }
        }
    }
}


/*

        System.out.println("Count Sort Times:");
        for (Double time : countSortTimes) {
            accumulatedTime = time 
            System.out.print(time + ",");

        }
        System.out.println(); 
        System.out.println("Quick Sort Times:");
        for (Double time : quickSortTimes) {
            System.out.print(time + ",");
        }
        System.out.println();

        System.out.println("Insertion Sort Times:");
        for (Double time : insertionSortTimes) {
            System.out.print(time + ",");
        }
        System.out.println();

        System.out.println("Selection Sort Times:");
        for (Double time : selectionSortTimes) {
            System.out.print(time + ",");
        }
        System.out.println();

        System.out.println("Bubble Sort Times:");
        for (Double time : bubbleSortTimes) {
            System.out.print(time + ",");
        }
        System.out.println();
    }
}

*/

        double accumulatedCountSortTime = 0;
        double accumulatedquickSortTime = 0;
        double accumulatedinsertionSortTimes = 0;
        double accumulatedselectionSortTimes = 0;
        double accumulatedbubbleSortTimes = 0;

        System.out.println("Count Sort Times:");
        for (Double time : countSortTimes) {
            accumulatedCountSortTime += time; 
            System.out.print(accumulatedCountSortTime + ",");

        }
        System.out.println(); 
        System.out.println("Quick Sort Times:");
        for (Double time : quickSortTimes) {
            accumulatedquickSortTime += time; 
            System.out.print(accumulatedquickSortTime + ",");
        }
        System.out.println();

        System.out.println("Insertion Sort Times:");
        for (Double time : insertionSortTimes) {
            accumulatedinsertionSortTimes += time; 
            System.out.print(accumulatedinsertionSortTimes + ",");
        }
        System.out.println();

        System.out.println("Selection Sort Times:");
        for (Double time : selectionSortTimes) {
            accumulatedselectionSortTimes += time;
            System.out.print(accumulatedselectionSortTimes + ",");
        }
        System.out.println();

        System.out.println("Bubble Sort Times:");
        for (Double time : bubbleSortTimes) {
            accumulatedbubbleSortTimes += time;
            System.out.print(accumulatedbubbleSortTimes + ",");
        }
        System.out.println();
    }
}





/* RESULTS 

Count Sort Times:
0.0130.01970.02440.03310.03420.05530.04730.04940.05180.26180.0740.07560.09860.18540.13030.15440.13480.08550.03920.02770.03180.03480.03060.04090.03120.03420.13780.03530.04420.03010.02830.01620.01250.010.00850.01010.00980.01150.03340.03270.01790.01080.01660.01390.01610.01740.0140.01370.02010.02320.03120.03310.02810.02940.02530.02580.02630.01830.02040.01860.02540.02830.03330.02850.03050.02230.02190.01910.04670.05980.04440.03930.02380.03210.03680.0250.03930.02080.04420.03720.03770.03240.02360.02780.04540.02850.02670.06120.03370.03050.04110.06010.02760.03580.02840.03860.03250.03960.0290.0385
Quick Sort Times:
0.02860.05170.12690.0450.03950.05660.04790.05010.06670.33580.08020.08680.09790.19270.0760.10140.10950.18940.08160.07740.14750.11210.1190.13250.13590.13470.13990.15960.17710.17010.17950.23920.14610.18170.15760.19910.18570.25290.32330.21320.19120.20520.23950.21470.22240.24390.23020.29280.31530.26380.25660.23570.30210.31630.27210.29220.32410.28910.41480.29930.32990.30310.31250.46220.35030.36380.33690.35720.74130.69980.51050.43570.38140.46990.42820.40850.6570.43930.52060.45750.47970.45640.42670.49350.60150.46880.4740.53990.47620.60060.69590.5040.51940.50240.51970.5620.59070.58750.56030.5545
Insertion Sort Times:
0.08870.29180.83891.21840.26020.32360.34110.41340.50581.03360.30181.17640.87810.38570.37760.37980.43120.69790.41940.4490.73530.76420.83590.86440.85240.89380.99411.05181.25721.17411.24691.22781.14041.29041.42871.55941.51941.84862.33651.82561.74881.8612.11262.17632.07012.8672.30452.84752.85712.80162.60892.89723.18753.05273.14283.2023.56733.75554.56933.64644.36593.80354.40124.51234.49624.58664.60545.03126.83759.15576.46196.3095.9437.03095.76485.95948.54616.69666.78826.50476.70277.07127.16227.77019.46017.65127.48878.68268.138511.448210.00428.62298.8059.21969.26669.918210.973714.901610.001610.8519
Selection Sort Times:
0.08590.26470.75080.41680.40610.53220.56040.7250.46970.86320.57790.68761.14340.65220.82730.83930.83570.78390.85530.85841.25541.46731.58011.40281.48541.80141.77031.87222.19672.09982.27142.16972.09352.29823.75892.8552.65434.61364.81523.17683.11173.55293.56493.76363.74054.34034.31174.41244.62234.69454.93847.03965.45885.91825.85665.86726.13396.02777.02676.86866.97077.35537.0537.6518.625110.14798.3359.513310.942913.042811.540212.36789.576410.428910.590112.785114.975113.920211.943111.465813.926212.50512.534114.241116.542313.179513.734314.819614.957918.759417.944516.048916.21816.585716.726116.883223.677322.836926.337818.512
Bubble Sort Times:
0.16230.70291.55611.12270.97950.65030.62110.76611.26611.37011.41091.94742.20952.43333.21863.68753.22632.79393.27574.24185.16997.1755.99055.83096.22946.75477.31798.47219.12598.715915.273511.257912.596112.714417.887214.830516.175822.337120.673718.814520.054720.7221.687625.11424.329926.178526.468626.517527.049728.036429.670735.330932.052639.10634.42434.884246.346438.143443.3441.767841.7942.916546.385756.145957.589152.078751.555657.292659.918856.051770.686761.908761.875565.967267.030867.004170.33477.6181.450275.776179.323876.524988.0431100.196583.941283.027488.362187.1035104.3975118.7947107.6118109.374798.9744111.0026103.7164116.7056128.4264120.6266122.6028124.8415

*/


/* ACCUMULATED TIMES 

Count Sort Times:
0.0218,0.0375,0.0576,0.0827,0.1124,0.162,0.20350000000000001,0.2497,0.39,0.4635,0.5294,0.612,0.7113,0.8588,1.0778,1.2342000000000002,1.3537000000000001,1.4688,1.5565000000000002,1.5827000000000002,1.6306000000000003,1.6816000000000002,1.7202000000000002,1.7661000000000002,1.7999000000000003,1.8276000000000003,2.0768000000000004,2.1249000000000002,2.1587,2.3105,2.3477,2.3926000000000003,2.4024,2.4109000000000003,2.4208000000000003,2.4346,2.4487,2.4769,2.5008,2.5206999999999997,2.5422,2.5549,2.5697,2.6054,2.6168,2.6306,2.6572999999999998,2.6816,2.7064,2.7292,2.7553,2.7793,2.8041,2.8338,2.8988,2.9384,2.9562,2.9887,3.0056000000000003,3.0256000000000003,3.0574000000000003,3.0850000000000004,3.107,3.1388000000000003,3.1654000000000004,3.24,3.2627,3.2840000000000003,3.3083000000000005,3.3386000000000005,3.3770000000000007,3.4060000000000006,3.5289000000000006,3.5568000000000004,3.5831000000000004,3.6493,3.7148000000000003,3.7697000000000003,3.8146000000000004,3.8461000000000003,3.8839,3.9090000000000003,3.9367,3.9732000000000003,4.0101,4.0494,4.108300000000001,4.139200000000001,4.200000000000001,4.239200000000001,4.325000000000001,4.414700000000001,4.480200000000001,4.520800000000001,4.551600000000001,4.591400000000001,4.624100000000001,4.665100000000002,4.693900000000002,4.779200000000002,
Quick Sort Times:
0.022,0.08399999999999999,0.2171,0.33949999999999997,0.3671,0.4206,0.46349999999999997,0.5115999999999999,0.5798,0.6681,0.7376,0.8233,0.9465,1.0488,1.1675,1.3363,1.4298,1.5324,1.6288,1.7142,1.805,1.8995,2.0085,2.1311,2.2907,2.4209,2.5951,2.7397,2.8739,3.086,3.3304,3.4926,3.6867,3.8553,4.0259,4.2655,4.4642,4.7349,4.9368,5.1291,5.3226,5.780600000000001,6.017900000000001,6.278200000000001,6.516400000000001,6.7898000000000005,7.053700000000001,7.356700000000001,7.672200000000001,7.976800000000001,8.2605,8.6403,8.9904,9.297099999999999,9.660999999999998,9.956299999999997,10.214999999999996,10.657699999999997,11.087999999999997,11.411499999999997,11.790399999999996,12.109999999999996,12.450399999999997,12.849099999999996,13.209899999999996,13.738899999999996,14.114899999999995,14.481799999999994,14.832199999999995,15.211899999999995,15.903699999999995,16.853099999999994,17.642499999999995,18.080499999999994,18.532399999999992,19.04829999999999,19.61559999999999,20.30449999999999,20.91459999999999,21.36979999999999,22.03249999999999,22.48869999999999,22.97389999999999,23.43289999999999,23.90879999999999,24.445699999999988,25.25629999999999,25.87789999999999,26.45719999999999,27.40649999999999,27.94969999999999,28.82339999999999,29.782699999999988,30.39939999999999,30.97449999999999,31.589499999999987,32.630299999999984,33.35319999999999,33.91399999999999,34.71859999999999,
Insertion Sort Times:
0.0804,0.38139999999999996,1.1604999999999999,2.6067,2.7968,3.0879000000000003,3.3865000000000003,3.8277,4.4667,5.203600000000001,5.816800000000001,6.152000000000001,7.123300000000001,7.6876000000000015,8.189900000000002,8.748400000000002,9.365200000000002,9.944,10.4564,10.9178,11.531699999999999,12.1093,12.8628,13.7534,15.0375,15.9932,17.1278,18.2212,19.2618,20.5994,22.332,23.704800000000002,25.7432,27.080000000000002,28.3834,29.8337,31.9096,34.572900000000004,36.304100000000005,38.001000000000005,39.8693,42.0444,44.486200000000004,48.012600000000006,50.287800000000004,52.661500000000004,55.23010000000001,58.125400000000006,60.97010000000001,63.89630000000001,66.95890000000001,69.95520000000002,74.27170000000002,78.47740000000002,82.35870000000001,86.04680000000002,89.30900000000003,94.58330000000002,98.66630000000002,102.67590000000003,106.44980000000002,111.48710000000003,115.92950000000003,121.69990000000003,126.78430000000003,132.20060000000004,138.38010000000003,143.59770000000003,149.07550000000003,154.25390000000004,162.58900000000006,169.63170000000005,176.92610000000005,183.55430000000004,190.46240000000003,200.62370000000004,208.03280000000004,217.31320000000005,227.01310000000007,234.61390000000006,243.95560000000006,252.74900000000005,262.22940000000006,270.19780000000003,278.08950000000004,287.266,297.793,306.0458,315.102,324.5206,334.3717,347.28819999999996,360.65409999999997,370.3341,379.83549999999997,389.56419999999997,400.75,422.918,436.6416,448.74109999999996,
Selection Sort Times:
0.0811,0.6446000000000001,1.3216,1.5377,1.8812000000000002,2.3013000000000003,2.8279000000000005,3.4877000000000007,4.0159,4.4717,4.994,5.701499999999999,7.0649999999999995,7.815199999999999,8.674999999999999,9.8683,10.873899999999999,11.835299999999998,13.030299999999999,13.903399999999998,15.052899999999998,16.1682,17.4042,18.8786,20.4579,22.0508,24.5446,26.497999999999998,28.449399999999997,30.832599999999996,33.1611,35.293,38.8757,41.0324,44.647200000000005,47.167300000000004,50.768,53.9975,57.0658,60.283100000000005,63.37200000000001,66.90320000000001,70.74260000000001,76.54140000000001,81.3491,85.65180000000001,91.99390000000001,96.5644,101.5082,108.28020000000001,113.35860000000001,119.51540000000001,125.97080000000001,133.63400000000001,139.74630000000002,146.71820000000002,153.2641,160.72510000000003,169.12740000000002,176.56700000000004,184.33100000000005,192.80800000000005,201.37340000000006,210.23010000000005,219.88060000000004,231.37640000000005,241.68990000000005,250.45710000000005,260.12640000000005,270.84830000000005,286.70230000000004,298.3265,309.3863,322.35720000000003,334.5475,352.797,367.96180000000004,383.583,399.23380000000003,412.2891,427.6397,448.7509,465.3755,479.1312,494.7786,508.4158,525.1414,540.0119,556.1157,572.6332,588.0914,604.6282,624.6447,644.8404999999999,661.8261999999999,680.8637999999999,710.5160999999998,733.8791999999999,754.8998999999999,777.2097999999999,
Bubble Sort Times:
0.1857,1.1416,2.5041,2.9326000000000003,3.6956,4.4963,5.0907,5.8938,7.0815,8.1,9.4138,11.0425,14.7329,17.8703,21.7259,24.9097,28.5916,32.734,35.908500000000004,39.180600000000005,42.91420000000001,47.68440000000001,52.69660000000001,58.54590000000001,65.03220000000002,72.72040000000001,82.46890000000002,90.53510000000001,98.60070000000002,107.19180000000001,116.40370000000001,126.23560000000002,136.20450000000002,149.72760000000002,164.40940000000003,182.66430000000003,209.02020000000002,225.1792,246.473,265.3245,284.9317,305.64059999999995,330.11609999999996,352.5841,375.91729999999995,400.70459999999997,425.31759999999997,460.43699999999995,486.9300999999999,519.3589,555.1757,592.77,627.3124,672.9807000000001,714.0162,758.1189,801.2227,843.8432,890.7186,939.1131,984.368,1031.6045000000001,1078.209,1128.785,1182.9759000000001,1242.8415000000002,1309.4579000000003,1363.1853000000003,1418.8984000000003,1491.9464000000003,1559.2196000000004,1629.8288000000005,1699.4007000000004,1776.7493000000004,1855.1616000000004,1937.8598000000004,2022.4626000000003,2120.9224000000004,2203.7835000000005,2292.2434000000003,2376.2459000000003,2483.8241000000003,2565.5409000000004,2654.9860000000003,2742.0529,2840.2405000000003,2937.7329000000004,3031.0879000000004,3123.5221000000006,3219.3761000000004,3329.1474000000003,3437.5753000000004,3548.7318000000005,3669.4958000000006,3796.6433000000006,3914.4917000000005,4045.5674000000004,4172.1194000000005,4304.110000000001,4456.760700000001,

/*